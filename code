#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <Wire.h>
#include <SPI.h>

#define OLED_RESET 4
Adafruit_SSD1306 Display1(OLED_RESET);
Adafruit_SSD1306 Display2(OLED_RESET);


const unsigned char radar_1 [] PROGMEM = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xfe, 0x0f, 0xf0, 0x7f, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xf1, 0xff, 0xff, 0x8f, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xe3, 0xff, 0xff, 0xc7, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xcf, 0xff, 0xff, 0xf3, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0x9f, 0xff, 0xff, 0xf9, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0x3f, 0xff, 0xff, 0xfc, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0x3f, 0xff, 0xff, 0xfc, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xdf, 0xfe, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xfb, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x9f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf9, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x9f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf9, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x9f, 0xfd, 0xff, 0xf8, 0x1f, 0xff, 0xbf, 0xf9, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xbf, 0xf9, 0xff, 0xe1, 0x87, 0xff, 0x9f, 0xfd, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xbf, 0xf9, 0xff, 0xc7, 0xe3, 0xff, 0x9f, 0xfd, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xbf, 0xfb, 0xff, 0xcf, 0xf3, 0xff, 0xdf, 0xfd, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x3f, 0xfb, 0xff, 0x9f, 0xf9, 0xff, 0xdf, 0xfc, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x3f, 0xfb, 0xff, 0x9f, 0xf9, 0xff, 0xdf, 0xfc, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x3f, 0xfb, 0xff, 0xbf, 0xfd, 0xff, 0xdf, 0xfc, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x3f, 0xfb, 0xff, 0xbf, 0xfd, 0xff, 0xdf, 0xfc, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x3f, 0xfb, 0xff, 0x9f, 0xf9, 0xff, 0xdf, 0xfc, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x3f, 0xfb, 0xff, 0x9f, 0xf9, 0xff, 0xdf, 0xfc, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xbf, 0xfb, 0xff, 0xcf, 0xf3, 0xff, 0xdf, 0xfd, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xbf, 0xf9, 0xff, 0xc7, 0xe3, 0xff, 0x9f, 0xfd, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xbf, 0xf9, 0xff, 0xe1, 0x87, 0xff, 0x9f, 0xfd, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x9f, 0xfd, 0xff, 0xf8, 0x1f, 0xff, 0xbf, 0xf9, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x9f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf9, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x9f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf9, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xdf, 0xfe, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xfb, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0x3f, 0xff, 0xff, 0xfc, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0x3f, 0xff, 0xff, 0xfc, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0x9f, 0xff, 0xff, 0xf9, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xcf, 0xff, 0xff, 0xf3, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xe3, 0xff, 0xff, 0xc7, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xf1, 0xff, 0xff, 0x8f, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xfc, 0x7f, 0xfe, 0x3f, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xfe, 0x0f, 0xf0, 0x7f, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};



unsigned long startTime = 0;         // Starttijd van de chronometer
bool running = false;                // Geeft aan of de chronometer aan het lopen is

int button = 6;
int pauze = 5;
int ledsPersonage[] = {9,8};
int meters = 0;

int ledState = LOW;
int knopStatus;
int vorigeKnopStatus = LOW;
int knopStatusPauze;
int vorigeKnopStatusPauze = LOW;
int aan = 0;
int minutes = 0;
int uitzetten = 0;
int stopPauze = 0;

int chronometer = 0;





void setup()
{
  Display1.begin(SSD1306_SWITCHCAPVCC, 0x3D);
  Display1.clearDisplay();
  Display1.display();

  Display2.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  Display2.clearDisplay();
  Display2.display();

  Wire.begin();
  pinMode(button, INPUT);
  pinMode(pauze, INPUT);

  for(int i = 0; i < 2; i++){
  
  pinMode(ledsPersonage[i], OUTPUT);
  }
  randomSeed(analogRead(0));

  
}









void loop(){
  Display1.setTextSize(2);
  Display1.setTextColor(WHITE, BLACK);
  Display2.setTextSize(2);
  Display2.setTextColor(WHITE, BLACK);
  knopStatus = digitalRead(button);
  
//debounce
  if (knopStatus != vorigeKnopStatus) {
    delay(50); 
    knopStatus = digitalRead(button);
  }

  if (knopStatus != vorigeKnopStatus) {
    vorigeKnopStatus = knopStatus;


    if (knopStatus == HIGH and aan == 0){// aanzetten, start spel
      aan = 1;
      Display1.clearDisplay();
      Display1.display();
      Display2.clearDisplay();
      Display2.display();
      
      Display1.setCursor(0, 0 );

      // display bitmap
      Display1.drawBitmap(0,0 , radar_1, 128, 64, WHITE);
      Display1.display();
      delay(1000);

      // invert display
      Display1.invertDisplay(1);
      //delay(2000);

      Display2.setCursor(0, 0 );
      Display2.print("connecting");
      Display2.display();
      Display2.print(".");
      delay(1000);
      Display2.display();
      Display2.print(".");
      delay(1000);
      Display2.display();
      Display2.print(".");
      Display2.display();
      delay(1000);
      Display2.clearDisplay();
      Display2.display();

      for (int i = 0; i < 5; i++) {
        digitalWrite(ledsPersonage[0], HIGH); // Zet de LED aan
        digitalWrite(ledsPersonage[1], HIGH); // Zet de LED aan
        delay(250);
        digitalWrite(ledsPersonage[0], LOW); // Zet de LED uit
        digitalWrite(ledsPersonage[1], LOW); // Zet de LED uit
        delay(250);
      }
      int randomNumberPersonage = random(2);
      digitalWrite(ledsPersonage[randomNumberPersonage], HIGH);


      Display1.clearDisplay();
      Display1.display();
      Display1.setCursor(0, 0 );
      Display1.print("radar 2");
      Display1.display();



      knopStatusPauze = digitalRead(pauze); // start spel wanneer op start/pauze knop gedrukt wordt
      while (knopStatusPauze == 0){
        Display2.setCursor(0, 0 );
        Display2.print("start?");
        Display2.display();
        knopStatusPauze = digitalRead(pauze);
      }
      

      
  

      Display2.clearDisplay();
      Display2.display();
      for (int i = 5; i > 0; i--) {
        Display2.setCursor(0, 0 );
        Display2.print(i);
        Display2.display();
        delay(1000);
         Display2.clearDisplay();
      }
      delay(500);
      Display2.clearDisplay();
      Display2.display();
      Display2.setCursor(0, 0 );
      int getal = 0;
      Display2.print(getal);
      Display2.display();
      Display2.println("m");
      Display2.display();
      chronometer = 1;
 

      
      



    } else if (knopStatus == HIGH and aan == 1){// afleggen
      aan = 0;
      uitzetten = 1; // chronometer uitzetten
      
      Display1.clearDisplay();
      Display1.display();
      Display2.clearDisplay();
      Display2.display();


      for(int i = 0; i < 2; i++){
  
      digitalWrite(ledsPersonage[i], LOW);
      }
    }else if (knopStatus == LOW and aan == 0){ // niet op knop gedrukt
      

    }
    
  }
  if (chronometer == 1 and !running and aan == 1) {
        // Start de chronometer als de knop wordt ingedrukt en de chronometer niet al loopt
        startTime = millis();
        running = true;

      }

  knopStatusPauze = digitalRead(pauze);
  
  //debounce
  if (knopStatusPauze != vorigeKnopStatusPauze) {
    delay(50); 
    knopStatusPauze = digitalRead(pauze);
  }

  if (knopStatusPauze != vorigeKnopStatusPauze) {
    vorigeKnopStatusPauze = knopStatusPauze;

    if (knopStatusPauze == HIGH  and stopPauze == 0){
      Display2.clearDisplay();
      Display2.display();
      Display2.setCursor(0, 0 );
      Display2.print("pauze");
      Display2.display();
      stopPauze = 1;
      
    }else if (knopStatusPauze == HIGH and stopPauze == 1){
      stopPauze = 0;
      Display2.clearDisplay();
      Display2.display();
      meters = random(1000);
      Display2.setCursor(0, 0 );
      Display2.print(meters);
      Display2.display();
      Display2.print("m");
      Display2.display();
      
    

    }
  }

  if (running) {

    
     
    
    if (uitzetten == 0 and aan == 1 and stopPauze == 0){
      unsigned long elapsedTime = millis() - startTime;  // Bereken de verstreken tijd
      int minutes = elapsedTime / 60000;                 // Bereken de minuten
      int seconds = (elapsedTime % 60000) / 1000;        // Bereken de seconden
      Display2.setCursor(0, 18 );
      Display2.print("tijd ");
      Display2.display();
      int minutes_aftellen = 29 - minutes;
      Display2.print(minutes_aftellen);
      Display2.display();
      Display2.print(":") ;
      Display2.display();
      int seconds_aftellen = 59 - seconds;
      
      
      if (seconds_aftellen < 10){
        Display2.print("0");
        Display2.display();
        Display2.print(seconds_aftellen);
        Display2.display();
      }else{
      Display2.print(seconds_aftellen);
      Display2.display();
      }

      if(minutes_aftellen == 0 and seconds_aftellen == 0){
        Display2.clearDisplay();
        Display2.display();
        Display2.setCursor(0, 0 );
        Display2.print("game over");
        Display2.display();
        while (knopStatus == 0){
        uitzetten = 1;
        knopStatus = digitalRead(button);
        }
      }
      
      if(minutes != 0 and minutes%2 == 0 and seconds == 0){ //afbeelden meters om de 2 minuten
        meters = random(1000);
        Display2.setCursor(0, 0 );
        Display2.print("");
        Display2.display();
        Display2.print(meters);
        Display2.display();
        Display2.print("m");
        Display2.display();

        Display1.clearDisplay();
        Display1.display();
        Display1.setCursor(0, 0 );
        Display1.print("radar 3");
        Display1.display();
      }

      

      
        

      
      
    }else if(uitzetten == 1){ // alles uitzetten
      Display1.clearDisplay();
      Display1.display();
      Display2.clearDisplay();  
      Display2.display();     
      uitzetten = 0;
      running = false;
    }
    
  }
  
}
